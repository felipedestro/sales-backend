// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id String @id @default(uuid())
  name String
  document String @unique
  birthday DateTime @db.Date
  order Order?
}

model Order {
  id String @id @default(uuid())
  date DateTime
  customer Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customer_id String @unique
  sale Sales?
  order OrderOnProducts[]
}

model Sales {
  id String @id @default(uuid())
  date DateTime @db.Date
  hour DateTime @db.Time
  total Float
  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order_id String @unique
}

model Stocks {
  id String @id @default(uuid())
  name String
  quantitative Int
  product Products?
}

model Products {
  id String @id @default(uuid())
  name String
  description String
  price Float
  stock Stocks @relation(fields: [stock_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stock_id String @unique
  product OrderOnProducts[]
}

model OrderOnProducts {
  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order_id String
  product Products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product_id String
  quantitative Int
  total Float

  @@id(order_id)
}
